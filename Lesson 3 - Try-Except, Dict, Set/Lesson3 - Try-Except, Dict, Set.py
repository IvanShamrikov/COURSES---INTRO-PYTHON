# # Конспект. Заняття 3. Try-Except. Словарь. Куча. Python 13-17
#
a = 0
b = 0
x = 0
y = 0
z = 0
#
#
# #Try-Except - команда "Попробуй выполнить". Не останавляивает выполнение программы при ошибке
# list = []
# print (list[0])  #Ошибка, массив пустой
#
# try :
#     print (list[0])
# except:
#     print ("AAAAAAA") #Выполнится при условии ошибки
# else:
#     print ("Всё ок") #Выполнится при условии положительного сценария
# finally:
#     print ("Выполнить в любом случае")
#
#
# #СЛОВАРЬ
# #Массив, в котором элементы стоят не по индексам, а по ключам
# #Ключом может быть неизменяемые типы - ниже
# #Значением может быть что угодно, как и в list
#
# d = {}
# d = dict()
#
# d = {
#     "key 1" : 3287 ,
#     "key 2" : "jhdfjhjd" ,
#     "key 3" : 87676
# }
# print (d)
#
#
# #Типы данных, которые можно использовать в качестве ключа:
# d = {
#     "key 1" : "" ,          #str
#     1 : "" ,                #int
#     2.5 : "",               #float
#     a*2 : "",               #переменная
#     True : "",              #boolean
#     False: "",              #boolean
#     None : "",              #boolean
#     (1,"dakj") : ""         #tuple
# }
#
#
d = {
    "key 1" : 3287 ,
    "key 2" : "jhdfjhjd" ,
    "key 3" : [1, 2, a, b, ("kjaf", "nwjbdfsc"), {"key 11": "AAA", "key 12" : "BBBB"}]  #Как и в list, элементами может быть что угодно
}
print (d.items())
for i in d:
    x = i
    y = d[i]
    print(x, " --->", y)


#
#
#
# key = 'some_key'
# value = 100500
# d = {key: value}
# print (d)
#
# print (d["some_key"])    #Вызов элемента словаря и работа с ним, аналогично list
# print (d["some_key"]+5)
#
# d["some_key"] = "New Value"     #Запись значения в словарь, аналогично list
# print (d["some_key"])
#
#
#
# d = {
#     "Name" : "" ,
#     "Surname" : "" ,
#     "E-mail" : ""
# }
# print (d)
# d["Name"] = "Ivan"              #Наполнение словаря информацией
# d["Surname"] = "Shamrikov"
# d["E-mail"] = "ivan@ivan.com"
# d["Phone"] = 93-333-33-33       #Добавление новой пары ключ-значение в словарь
# print (d)
#
#
#
#
# #Если мы попытаемся обратиться к несуществующему ключу - будет ошибка
# print (d["jjj"])
# #Метод .get проверяет наличие ключа и выводит значение или None
# print(d.get("jjj"))
#
#
# print(d.get("jjj", "OOOOOO"))   #Выводит значение "OOOOOOO", если ключа нет. Эта конструкция заменяет if-else, как в примере дальше
# if d.get ("jjj") :
#     print (d["jjj"])
# else:
#     print ("OOOOOOO")


#Перебор значений словаря
# d = {
#     "Name" : "Ivan" ,
#     "Surname" : "Shamrikov" ,
#     "E-mail" : "ivan@ivan.com",
#     "Phone" : 933333333,
#     "Passwords" : [
#                     "Password 1",
#                     989798887,
#                     ("print", "table")
#                     ]
# }
# for i in d :
#     print (i)
#     print (d[i])
#     # print (i, " - ", d[i])

#
#
# #Метод .items() для словарей
# d.items()   #Выводит массив из tuple "Ключ-Значение"
# #Можно вывести вот так:
# for i in d.items() :
#     print (i)
#     for j in i :
#         print (j)
#
# #Метод .keys() для словарей
# d.keys()   #Выводит массив из Ключей
#
# #Метод .values() для словарей
# d.values()   #Выводит массив из Значений
# my_list = d.values() #Делаем так и можем работать с ключами. Данные вытягиваются из словаря и записываются в новый массив.
#
# #Метод .setdefault - Если в словаре нет такого ключа - он его создаёт и записывает значение
# d.setdefault("Test", "Опана")
# d.setdefault("Test", "fsdsdv") #Если этот ключ есть - он его не тронет. При реализации останется "Опана".
#
#
#
#
#
#
# #Set (Куча) - неупорядоченный объём данных. Нет индексов и собержит только уникальные значения.
# # Создаётся в {}, но без каких-либо ключей.
# s = set()
# s = {1, 2, 3, 4}
# type (s)
#
# #To add one item to a set use the add() method.
# #To add more than one item to a set use the update() method.
# s.add(5)
# s.update([6,7,8])   #Добавляем тип list
#
# #ЗАДАЧКА
# #Как из массива отобрать уникальные элементы и создать с ними новый массив?
# list = [1,2,3,4,5,6,4,2,1,4,5,3,7,4,7,3,0]
# s = set(list)
# print (s)
#
